// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    // provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id          Int    @id @default(autoincrement())
    username    String @unique
    displayName String

    passwordHash String
    passwordSalt String
    token        String?

    UploadFileQueue     UploadFileQueue[]
    Playlist            Playlist[]
    PlaylistTrack       PlaylistTrack[]
    StreamHistory       StreamHistory[]
    SimpleStreamHistory SimpleStreamHistory[]

    @@index([username])
}

// File processing queue
model UploadFileQueue {
    id         Int      @id @default(autoincrement())
    status     Int      @default(0) // 0: waiting
    filePath   String
    filename   String?
    mimetype   String
    size       Int
    md5        String
    uploadDate DateTime @default(now())

    userId Int
    User   User @relation(fields: [userId], references: [id])

    @@index([status])
    @@index([userId])
}

// User playlists
model Playlist {
    id                Int             @id @default(autoincrement())
    name              String
    lastModifiedDate  DateTime
    description       String
    numberOfFollowers Int
    tracks            PlaylistTrack[]

    userId Int
    User   User @relation(fields: [userId], references: [id])

    @@index([userId])
}

// Tracks for playlists
model PlaylistTrack {
    id             Int       @id @default(autoincrement())
    name           String
    artistName     String
    albumName      String?
    spotifyTrackId Int?
    Playlist       Playlist? @relation(fields: [playlistId], references: [id])
    playlistId     Int?

    userId Int
    User   User @relation(fields: [userId], references: [id])

    @@index([userId])
}

// User stream history
model StreamHistory {
    id         Int     @id @default(autoincrement())
    trackName  String?
    albumName  String?
    artistName String?

    msPlayed   Int
    datePlayed DateTime

    platform        String
    spotifyTrackUri String?

    isSong          Boolean
    episodeName     String?
    episodeShowName String?
    spotifyShowUri  String?

    shuffle Boolean
    skipped Boolean?
    offline Boolean

    reasonStart   String
    reasonEnd     String
    incognitoMode Boolean?

    userId Int
    User   User @relation(fields: [userId], references: [id])

    @@index([datePlayed])
    @@index([trackName])
    @@index([artistName])
    @@index([isSong])
    @@index([userId])
}

model SimpleStreamHistory {
    id             Int      @id @default(autoincrement())
    trackName      String
    artistName     String
    msPlayed       Int
    endTime        DateTime
    spotifyTrackId Int?

    userId Int
    User   User @relation(fields: [userId], references: [id])

    @@index([endTime])
    @@index([artistName])
    @@index([spotifyTrackId])
    @@index([userId])
}
